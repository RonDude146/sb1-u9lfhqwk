generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts          Account[]
  sessions          Session[]
  roles             UserRole[]
  addresses         Address[]
  businessAccount   BusinessAccount?
  orders            Order[]
  cartItems         CartItem[]
  wishlistItems     WishlistItem[]
  auditLogs         AuditLog[]
  couponRedemptions CouponRedemption[]
  preferences       UserPreference?

  @@map("users")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions Json     @default("{}")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users UserRole[]

  @@map("roles")
}

model UserRole {
  id     String @id @default(cuid())
  userId String
  roleId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model Address {
  id           String  @id @default(cuid())
  userId       String
  type         String  @default("shipping") // "shipping", "billing"
  firstName    String
  lastName     String
  company      String?
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  postalCode   String
  country      String  @default("IN")
  phone        String?
  isDefault    Boolean @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingOrders Order[]  @relation("ShippingAddress")
  billingOrders  Order[]  @relation("BillingAddress")
  shipments      Shipment[]

  @@map("addresses")
}

model BusinessAccount {
  id           String   @id @default(cuid())
  userId       String   @unique
  companyName  String
  gstin        String?  @unique
  businessType String   // "manufacturer", "distributor", "retailer"
  isApproved   Boolean  @default(false)
  approvedAt   DateTime?
  approvedBy   String?
  salesRepId   String?
  creditLimit  Decimal? @db.Decimal(12, 2)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  quotes Quote[]

  @@map("business_accounts")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?  @db.Text
  shortDesc   String?
  origin      String?
  category    String
  tags        String[] @default([])
  hsnCode     String?
  gstRate     Decimal  @db.Decimal(5, 2) @default(18.00)
  images      Json     @default("[]")
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  seoTitle    String?
  seoDesc     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  variants      ProductVariant[]
  cartItems     CartItem[]
  orderItems    OrderItem[]
  wishlistItems WishlistItem[]
  quoteItems    QuoteItem[]

  @@map("products")
}

model ProductVariant {
  id           String  @id @default(cuid())
  productId    String
  sku          String  @unique
  name         String
  weightGrams  Int
  priceINR     Decimal @db.Decimal(12, 2)
  mrpINR       Decimal @db.Decimal(12, 2)
  packaging    String  @default("pouch") // "pouch", "jar", "box"
  stockQty     Int     @default(0)
  lowStockQty  Int     @default(10)
  isActive     Boolean @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  product           Product            @relation(fields: [productId], references: [id], onDelete: Cascade)
  inventoryLedgers  InventoryLedger[]
  cartItems         CartItem[]
  orderItems        OrderItem[]
  wishlistItems     WishlistItem[]
  quoteItems        QuoteItem[]

  @@map("product_variants")
}

model Lot {
  id           String    @id @default(cuid())
  batchCode    String    @unique
  originEstate String
  harvestedOn  DateTime
  bestBefore   DateTime
  qcNotes      String?   @db.Text
  totalQty     Int
  availableQty Int
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  inventoryLedgers InventoryLedger[]

  @@map("lots")
}

model InventoryLedger {
  id        String   @id @default(cuid())
  variantId String
  lotId     String
  type      String   // "in", "out"
  quantity  Int
  reason    String   // "purchase", "sale", "adjustment", "damage"
  reference String?  // order_id, adjustment_id, etc.
  createdAt DateTime @default(now())

  variant ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  lot     Lot            @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@map("inventory_ledgers")
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  variantId String
  quantity  Int
  giftNote  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([userId, variantId])
  @@map("cart_items")
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  variantId String?
  createdAt DateTime @default(now())

  user    User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, variantId])
  @@map("wishlist_items")
}

model Order {
  id               String   @id @default(cuid())
  orderNumber      String   @unique
  userId           String
  status           String   @default("pending") // "pending", "paid", "processing", "shipped", "delivered", "cancelled", "refunded"
  paymentStatus    String   @default("pending") // "pending", "paid", "failed", "refunded"
  shippingAddressId String
  billingAddressId String
  subtotalINR      Decimal  @db.Decimal(12, 2)
  taxAmountINR     Decimal  @db.Decimal(12, 2)
  shippingINR      Decimal  @db.Decimal(12, 2)
  discountINR      Decimal  @db.Decimal(12, 2) @default(0)
  totalINR         Decimal  @db.Decimal(12, 2)
  currency         String   @default("INR")
  exchangeRate     Decimal  @db.Decimal(10, 6) @default(1)
  couponCode       String?
  notes            String?  @db.Text
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingAddress Address  @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress  Address  @relation("BillingAddress", fields: [billingAddressId], references: [id])
  items           OrderItem[]
  payments        Payment[]
  shipments       Shipment[]
  couponRedemption CouponRedemption?

  @@map("orders")
}

model OrderItem {
  id           String  @id @default(cuid())
  orderId      String
  productId    String
  variantId    String
  sku          String
  name         String
  weightGrams  Int
  quantity     Int
  priceINR     Decimal @db.Decimal(12, 2)
  totalINR     Decimal @db.Decimal(12, 2)
  giftNote     String?
  createdAt    DateTime @default(now())

  order   Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product        @relation(fields: [productId], references: [id])
  variant ProductVariant @relation(fields: [variantId], references: [id])

  @@map("order_items")
}

model Payment {
  id                  String   @id @default(cuid())
  orderId             String
  provider            String   // "razorpay", "dibsy", "telr", "moyasar", "omannet"
  providerPaymentId   String
  providerOrderId     String?
  status              String   // "created", "authorized", "captured", "failed", "refunded"
  amountINR           Decimal  @db.Decimal(12, 2)
  currency            String   @default("INR")
  method              String?  // "card", "netbanking", "upi", "wallet"
  gateway             String?
  signature           String?
  failureReason       String?
  refundedAmount      Decimal? @db.Decimal(12, 2)
  webhookProcessedAt  DateTime?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@unique([provider, providerPaymentId])
  @@map("payments")
}

model Shipment {
  id                 String    @id @default(cuid())
  orderId            String
  addressId          String
  provider           String    // "shiprocket", "gcc"
  providerShipmentId String?
  awb                String?
  courier            String?
  trackingUrl        String?
  status             String    @default("created") // "created", "manifest", "dispatched", "delivered", "cancelled", "rto"
  estimatedDelivery  DateTime?
  actualDelivery     DateTime?
  weightGrams        Int?
  lengthCm           Int?
  widthCm            Int?
  heightCm           Int?
  codAmount          Decimal?  @db.Decimal(12, 2)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  address Address @relation(fields: [addressId], references: [id])

  @@map("shipments")
}

model DiscountCode {
  id            String   @id @default(cuid())
  code          String   @unique
  type          String   // "percentage", "fixed"
  value         Decimal  @db.Decimal(12, 2)
  minOrderINR   Decimal? @db.Decimal(12, 2)
  maxDiscountINR Decimal? @db.Decimal(12, 2)
  usageLimit    Int?
  usageCount    Int      @default(0)
  userLimit     Int?     @default(1)
  validFrom     DateTime
  validUntil    DateTime
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  redemptions CouponRedemption[]

  @@map("discount_codes")
}

model CouponRedemption {
  id             String @id @default(cuid())
  orderId        String @unique
  discountCodeId String
  userId         String
  discountINR    Decimal @db.Decimal(12, 2)
  createdAt      DateTime @default(now())

  order        Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  discountCode DiscountCode @relation(fields: [discountCodeId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@map("coupon_redemptions")
}

model CurrencyRate {
  id           String   @id @default(cuid())
  currencyCode String   @unique // "QAR", "AED", "SAR", "OMR"
  rateToINR    Decimal  @db.Decimal(10, 6)
  updatedAt    DateTime @updatedAt

  @@map("currency_rates")
}

model Quote {
  id                String   @id @default(cuid())
  businessAccountId String
  status            String   @default("requested") // "requested", "reviewed", "approved", "quoted", "converted"
  csvData           Json?
  notes             String?  @db.Text
  adminNotes        String?  @db.Text
  totalEstimateINR  Decimal? @db.Decimal(12, 2)
  validUntil        DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  businessAccount BusinessAccount @relation(fields: [businessAccountId], references: [id], onDelete: Cascade)
  items           QuoteItem[]

  @@map("quotes")
}

model QuoteItem {
  id        String @id @default(cuid())
  quoteId   String
  productId String
  variantId String
  quantity  Int
  priceINR  Decimal @db.Decimal(12, 2)
  totalINR  Decimal @db.Decimal(12, 2)

  quote   Quote          @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  product Product        @relation(fields: [productId], references: [id])
  variant ProductVariant @relation(fields: [variantId], references: [id])

  @@map("quote_items")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String   // "create", "update", "delete", "login", "logout"
  resource  String   // "product", "order", "user", "settings"
  resourceId String?
  oldData   Json?
  newData   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model TranslationKey {
  id       String @id @default(cuid())
  key      String @unique
  en       String
  hi       String?
  ta       String?
  kn       String?
  ar       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("translation_keys")
}

model SystemSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  updatedAt DateTime @updatedAt

  @@map("system_settings")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model NewsletterSubscription {
  id        String   @id @default(cuid())
  email     String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("newsletter_subscriptions")
}

model UserPreference {
  id           String @id @default(cuid())
  userId       String @unique
  language     String @default("en")
  currency     String @default("INR")
  notifications Json   @default("{\"email\": true, \"sms\": false, \"push\": true}")
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}